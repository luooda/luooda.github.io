import{_ as n,c as r,a,o as s}from"./app-DF0nvRj4.js";const o={};function e(i,t){return s(),r("div",null,t[0]||(t[0]=[a('<h2 id="前言-为什么要学习设计模式" tabindex="-1"><a class="header-anchor" href="#前言-为什么要学习设计模式"><span>前言：为什么要学习设计模式？</span></a></h2><p>软件开发如同建造房屋。一个新手可能会随心所欲地堆砌砖瓦，虽然也能勉强建起一间小屋，但它可能结构混乱、难以扩展，甚至一阵风雨就可能倒塌。</p><p>而一位经验丰富的建筑师，在动手之前，脑海中早已有了无数成熟的“建筑范式”：承重墙该如何设计、水电管线该如何布局、空间利用如何才能最高效……</p><p>在软件工程领域，这些经过千锤百炼的“建筑范式”，就是我们所说的<strong>设计模式 (Design Patterns)</strong>。</p><h2 id="什么是设计模式" tabindex="-1"><a class="header-anchor" href="#什么是设计模式"><span>什么是设计模式？</span></a></h2><blockquote><p><strong>设计模式是在特定上下文中，针对常见问题的一种可复用的解决方案。</strong></p></blockquote><p>让我们来拆解这个定义：</p><ul><li><strong>不是具体的代码，而是“解决方案”</strong>：设计模式不是一个可以直接复制粘贴的类或函数，而是一种<strong>思想和蓝图</strong>。它描述了问题的结构、参与者以及它们之间的协作方式。</li><li><strong>针对“常见问题”</strong>：它们解决了在软件开发中反复出现的问题。比如，如何确保一个类只有一个实例？如何让一个对象的状态改变时，能通知所有依赖它的对象？</li><li><strong>“可复用”</strong>：你可以在完全不同的项目中，应用同一种模式来解决相似的问题。</li><li><strong>“特定上下文”</strong>：没有万能的模式。每种模式都有其最适用的场景，以及使用不当可能带来的弊端。</li></ul><p>简单来说，设计模式就是<strong>前人经验的总结</strong>，是<strong>身经百战的工程师们为我们提炼出的“武功秘籍”</strong>。</p><hr><h2 id="学习设计模式的核心收益" tabindex="-1"><a class="header-anchor" href="#学习设计模式的核心收益"><span>学习设计模式的核心收益</span></a></h2><p>你可能会想，我不用这些模式，不也写出了很多功能吗？是的，但学习设计模式将让你的开发能力从“能用”提升到“好用”和“可维护”的层次。</p><div class="hint-container tip"><p class="hint-container-title">核心收益</p><ul><li><p><strong>1. 代码复用与健壮性</strong> 使用经过验证的模式，可以让你站在巨人的肩膀上，避免重复造轮子，写出更稳定、更可靠的代码。</p></li><li><p><strong>2. 提高代码的可维护性和可扩展性</strong> 遵循设计模式编写的代码，通常结构更清晰、职责更明确、耦合度更低。当需求变更时，你会发现修改代码不再是一场灾难。</p></li><li><p><strong>3. 促进团队沟通的“通用词汇”</strong> 这是最重要也最容易被忽略的一点。当你和同事说：“我们这里用一个<strong>观察者模式</strong>来处理事件通知吧”，所有人立刻就能心领神会。设计模式为开发者提供了一套标准的“黑话”，极大地提升了沟通效率。</p></li><li><p><strong>4. 成为优秀框架的“阅读者”</strong> 几乎所有优秀的开源框架（如 Spring, Mybatis）都大量使用了设计模式。理解了设计模式，你就能更快地读懂这些框架的源码，理解其设计思想，从而更好地使用它们。</p></li></ul></div><h2 id="设计模式的分类-三大类别" tabindex="-1"><a class="header-anchor" href="#设计模式的分类-三大类别"><span>设计模式的分类：三大类别</span></a></h2><p>经典的《设计模式：可复用面向对象软件的基础》一书（由“四人帮”GoF 撰写）将 23 种设计模式分为了三大类。这个分类方法至今仍是学习设计模式的主流框架。</p><h3 id="_1-创建型模式-creational-patterns" tabindex="-1"><a class="header-anchor" href="#_1-创建型模式-creational-patterns"><span>1. 创建型模式 (Creational Patterns)</span></a></h3><p><strong>核心</strong>：关注于<strong>对象的创建过程</strong>，将对象的创建与使用解耦。</p><p>它们旨在让系统在创建对象时，不必关心具体的实现细节，从而提供更大的灵活性。</p><ul><li><strong>主要模式</strong>：单例模式、工厂方法模式、抽象工厂模式、建造者模式、原型模式。</li></ul><h3 id="_2-结构型模式-structural-patterns" tabindex="-1"><a class="header-anchor" href="#_2-结构型模式-structural-patterns"><span>2. 结构型模式 (Structural Patterns)</span></a></h3><p><strong>核心</strong>：关注于<strong>类和对象的组合</strong>，如何将它们组装成更大的、功能更强的结构。</p><p>它们旨在简化系统的结构，让你能更容易地理解不同部分之间的关系。</p><ul><li><strong>主要模式</strong>：适配器模式、桥接模式、组合模式、装饰器模式、外观模式、享元模式、代理模式。</li></ul><h3 id="_3-行为型模式-behavioral-patterns" tabindex="-1"><a class="header-anchor" href="#_3-行为型模式-behavioral-patterns"><span>3. 行为型模式 (Behavioral Patterns)</span></a></h3><p><strong>核心</strong>：关注于<strong>对象之间的通信与职责分配</strong>。</p><p>它们旨在有效地组织对象间的协作，降低它们的耦合度，让系统中的每个对象都能各司其职。</p><ul><li><strong>主要模式</strong>：责任链模式、命令模式、解释器模式、迭代器模式、中介者模式、备忘录模式、观察者模式、状态模式、策略模式、模板方法模式、访问者模式。</li></ul><hr><h2 id="如何学习设计模式" tabindex="-1"><a class="header-anchor" href="#如何学习设计模式"><span>如何学习设计模式？</span></a></h2><div class="hint-container caution"><p class="hint-container-title">学习建议与误区</p><ul><li><strong>理解意图，而非死记硬背</strong>: 学习每个模式时，最重要的是理解它<strong>要解决什么问题</strong>。不要去背诵 UML 类图和示例代码。</li><li><strong>从最常用的开始</strong>: 不必一口气学完 23 种。可以从<strong>单例、工厂、策略、观察者、装饰器</strong>等最常用的模式开始，理解透彻。</li><li><strong>在源码中寻找</strong>: 主动去 Spring 等你熟悉的框架源码中，寻找设计模式的实际应用，这会让你印象更深刻。</li><li><strong>动手实践</strong>: 尝试在你自己的小项目中，针对某个具体问题，有意识地应用一个设计模式。</li><li><strong>切忌过度设计</strong>: 这是初学者最容易犯的错误。<strong>不要为了用模式而用模式</strong>。如果简单的代码就能清晰地解决问题，那就不要强行套用一个复杂的模式。模式是解决复杂问题的工具，而不是炫技的手段。</li></ul></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>设计模式是通往高级工程师的必经之路。它不是银弹，但它是一套强大的思想工具箱，能帮助我们编写出更优雅、更健壮、更易于维护的软件。</p><p>在本系列笔记中，我将逐一深入探讨这些经典的设计模式，结合 Java 实例代码，分享我的学习心得和实践经验。</p><p>让我们一起开始这场提升内功的修行之旅吧！</p>',34)]))}const p=n(o,[["render",e]]),g=JSON.parse('{"path":"/design_pattern/","title":"设计模式入门","lang":"zh-CN","frontmatter":{"title":"设计模式入门","date":"2024-08-24T00:00:00.000Z","permalink":"/design_pattern/","tags":["设计模式","软件工程","架构"],"sticky":true,"createTime":"2025/08/24 03:29:31"},"readingTime":{"minutes":5.32,"words":1597},"git":{"createdTime":1755980245000,"updatedTime":1755980245000,"contributors":[{"name":"luooda","username":"luooda","email":"phnoneld@outlook.com","commits":1,"avatar":"https://avatars.githubusercontent.com/luooda?v=4","url":"https://github.com/luooda"}]},"filePathRelative":"notes/design_pattern/01.简介.md","headers":[]}');export{p as comp,g as data};
