import{_ as i,c as a,a as n,o as l}from"./app-DF0nvRj4.js";const e={};function h(t,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h3 id="_1-一句话概括" tabindex="-1"><a class="header-anchor" href="#_1-一句话概括"><span>1. 一句话概括</span></a></h3><p>桥接模式是一种结构型设计模式，它旨在<strong>将抽象部分与它的实现部分分离，使它们都可以独立地变化</strong>。</p><h3 id="_2-生活中的比喻-遥控器与电视机" tabindex="-1"><a class="header-anchor" href="#_2-生活中的比喻-遥控器与电视机"><span>2. 生活中的比喻：遥控器与电视机</span></a></h3><p>想象一下你家里的遥控器和电视机。</p><ul><li><strong>遥控器（抽象部分）</strong>：它定义了一系列操作，比如“开/关”、“换台”、“调音量”。这些是高层级的抽象功能。你可以有不同类型的遥控器，比如“基础遥控器”、“带学习功能的遥控器”、“智能遥控器”。</li><li><strong>电视机（实现部分）</strong>：它是真正执行这些操作的设备。你可以有不同品牌的电视机，比如“索尼电视”、“三星电视”、“小米电视”。每个品牌的电视机实现“开/关”等功能的方式（内部电路、信号协议）是不同的。</li></ul><p><strong>桥接模式的作用</strong>： 如果没有桥接模式，你可能需要为每个品牌的电视机都设计一个专用的遥控器：<code>索尼遥控器</code>、<code>三星遥控器</code>... 如果你又想增加一个“智能遥控器”的功能，你就得为每个品牌再造一个：<code>智能索尼遥控器</code>、<code>智能三星遥控器</code>... 这会导致类的数量爆炸式增长。</p><p>桥接模式就像一个<strong>通用协议</strong>。遥控器只负责发出标准的“换台”信号，而电视机则负责接收这个标准信号并用自己的方式去实现换台。这样，遥控器（抽象）和电视机（实现）就可以独立发展了。你可以随意更换电视机品牌，而不用换遥控器；你也可以升级你的遥控器，而不用换电视机。遥控器和电视机之间的连接，就是那个“桥”。</p><hr><h3 id="_3-解决的问题-类的-笛卡尔积-爆炸" tabindex="-1"><a class="header-anchor" href="#_3-解决的问题-类的-笛卡尔积-爆炸"><span>3. 解决的问题：类的“笛卡尔积”爆炸</span></a></h3><p>在软件设计中，我们经常会遇到一个类有两个或多个独立变化的维度。</p><p><strong>经典案例：形状与颜色</strong></p><p>假设我们要绘制不同颜色的形状。</p><ul><li><strong>维度1（形状）</strong>：圆形、正方形、三角形...</li><li><strong>维度2（颜色）</strong>：红色、蓝色、绿色...</li></ul><p>如果使用继承来实现，会是这样：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>           Shape</span></span>
<span class="line"><span>          /     \\</span></span>
<span class="line"><span>      Circle   Square</span></span>
<span class="line"><span>     /   \\     /   \\</span></span>
<span class="line"><span>RedCircle BlueCircle RedSquare BlueSquare</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>问题显而易见</strong>：</p><ul><li><strong>类数量爆炸</strong>：每增加一种新形状（如三角形），就需要为它增加所有颜色的子类（<code>RedTriangle</code>, <code>BlueTriangle</code>...）。每增加一种新颜色（如绿色），就需要为所有形状增加子类（<code>GreenCircle</code>, <code>GreenSquare</code>...）。这是 M x N 的增长关系。</li><li><strong>扩展性差</strong>：代码库变得非常臃肿和难以维护。</li></ul><p><strong>桥接模式的解决方案</strong>： 将这两个维度分开，让它们通过“组合”关系连接，而不是继承。</p><ul><li><strong>抽象部分</strong>：<code>Shape</code> (形状)</li><li><strong>实现部分</strong>：<code>Color</code> (颜色)</li></ul><p><code>Shape</code> 类内部持有一个 <code>Color</code> 对象的引用。当 <code>Shape</code> 需要绘制自己时，它会调用 <code>Color</code> 对象的方法来填充颜色。</p><p><img src="https://refactoringguru.cn/images/patterns/diagrams/bridge/structure-zh-2x.png" alt="Bridge Pattern UML"></p><hr><h3 id="_4-桥接模式的结构与参与者" tabindex="-1"><a class="header-anchor" href="#_4-桥接模式的结构与参与者"><span>4. 桥接模式的结构与参与者</span></a></h3><p>桥接模式包含以下四个核心角色：</p><ol><li><p><strong>Abstraction (抽象部分)</strong></p><ul><li>定义了高层控制的抽象接口。</li><li>内部维护一个指向 <code>Implementor</code>（实现部分）对象的引用。</li><li>对应例子中的 <code>Shape</code> 类。</li></ul></li><li><p><strong>RefinedAbstraction (扩展抽象部分)</strong></p><ul><li>继承或实现 <code>Abstraction</code>，扩展其接口。</li><li>对高层逻辑进行细化。</li><li>对应例子中的 <code>Circle</code>、<code>Square</code> 类。</li></ul></li><li><p><strong>Implementor (实现部分接口)</strong></p><ul><li>定义了底层实现类的接口，这个接口不一定要和 <code>Abstraction</code> 的接口完全一致。</li><li>它只提供基本的操作，<code>Abstraction</code> 通过调用这些操作来完成复杂的业务。</li><li>对应例子中的 <code>Color</code> 接口。</li></ul></li><li><p><strong>ConcreteImplementor (具体实现部分)</strong></p><ul><li>实现了 <code>Implementor</code> 接口。</li><li>是真正执行底层操作的类。</li><li>对应例子中的 <code>RedColor</code>、<code>BlueColor</code> 类。</li></ul></li></ol><p><strong>核心思想</strong>：<strong>用组合/聚合关系（has-a）代替继承关系（is-a）</strong>。<code>Abstraction</code> <strong>拥有</strong>一个 <code>Implementor</code>，而不是<strong>是</strong>一个 <code>Implementor</code>。</p><hr><h3 id="_5-java-代码示例-形状与颜色" tabindex="-1"><a class="header-anchor" href="#_5-java-代码示例-形状与颜色"><span>5. Java 代码示例（形状与颜色）</span></a></h3><h4 id="步骤1-创建实现部分接口-implementor" tabindex="-1"><a class="header-anchor" href="#步骤1-创建实现部分接口-implementor"><span>步骤1: 创建实现部分接口 (Implementor)</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Implementor: 颜色接口</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> interface</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> applyColor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="步骤2-创建具体实现类-concreteimplementor" tabindex="-1"><a class="header-anchor" href="#步骤2-创建具体实现类-concreteimplementor"><span>步骤2: 创建具体实现类 (ConcreteImplementor)</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// ConcreteImplementor A: 红色</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> RedColor</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> implements</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> applyColor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Applying red color.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// ConcreteImplementor B: 蓝色</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> BlueColor</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> implements</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> applyColor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Applying blue color.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="步骤3-创建抽象部分-abstraction" tabindex="-1"><a class="header-anchor" href="#步骤3-创建抽象部分-abstraction"><span>步骤3: 创建抽象部分 (Abstraction)</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Abstraction: 形状类</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> abstract</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Shape</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 桥接的关键：持有一个实现部分的引用</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    protected</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Color</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 通过构造函数将具体实现注入</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Shape</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Color </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 高层逻辑，具体绘制由子类完成</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> abstract</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> draw</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="步骤4-创建扩展抽象部分-refinedabstraction" tabindex="-1"><a class="header-anchor" href="#步骤4-创建扩展抽象部分-refinedabstraction"><span>步骤4: 创建扩展抽象部分 (RefinedAbstraction)</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// RefinedAbstraction A: 圆形</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Circle</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Shape</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Circle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Color </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        super</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> draw</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Drawing a Circle. </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 调用实现部分的方法</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">applyColor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// RefinedAbstraction B: 正方形</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Square</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Shape</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Square</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Color </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        super</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> draw</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Drawing a Square. </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 调用实现部分的方法</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">applyColor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="步骤5-客户端调用" tabindex="-1"><a class="header-anchor" href="#步骤5-客户端调用"><span>步骤5: 客户端调用</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> BridgePatternDemo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 创建一个红色的圆形</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Shape</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> redCircle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Circle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RedColor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        redCircle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">draw</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 创建一个蓝色的正方形</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Shape</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> blueSquare</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Square</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> BlueColor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        blueSquare</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">draw</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 现在可以自由组合</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 比如，一个蓝色的圆形</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Shape</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> blueCircle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Circle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> BlueColor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        blueCircle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">draw</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果</strong>:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Drawing a Circle. Applying red color.</span></span>
<span class="line"><span>Drawing a Square. Applying blue color.</span></span>
<span class="line"><span>Drawing a Circle. Applying blue color.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，如果想增加一个“绿色”，只需添加 <code>GreenColor</code> 类即可，<code>Shape</code> 相关的类完全不用修改。如果想增加一个“三角形”，只需添加 <code>Triangle</code> 类，<code>Color</code> 相关的类也完全不用修改。</p><hr><h3 id="_6-优缺点" tabindex="-1"><a class="header-anchor" href="#_6-优缺点"><span>6. 优缺点</span></a></h3><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><ol><li><strong>分离抽象和实现</strong>：这是最核心的优点。让两个部分可以独立地扩展，而不会相互影响。</li><li><strong>极大地提高了扩展性</strong>：可以独立地对抽象部分和实现部分进行扩展，符合开闭原则。</li><li><strong>避免了类爆炸</strong>：有效解决了由多维度变化导致的子类数量过多的问题。</li><li><strong>实现细节对客户透明</strong>：客户代码只需与高层的 <code>Abstraction</code> 交互，无需关心底层的 <code>Implementor</code> 是如何实现的。</li></ol><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h4><ol><li><strong>增加了系统的复杂性</strong>：引入了更多的类和接口，理解和设计上需要花费更多精力。</li><li><strong>需要提前识别出两个独立变化的维度</strong>：如果设计不当，或者维度划分不清晰，使用桥接模式可能会适得其反。</li></ol><hr><h3 id="_7-适用场景" tabindex="-1"><a class="header-anchor" href="#_7-适用场景"><span>7. 适用场景</span></a></h3><ol><li>当一个类存在两个或多个独立变化的维度，且你希望这两个维度可以独立扩展时。</li><li>当你不希望在抽象和其实现之间有固定的绑定关系时（例如，通过配置文件来决定使用哪个具体实现）。</li><li>当你想在多个对象间共享一个实现，但同时要求客户不知道这一点时。</li><li>典型的应用场景： <ul><li><strong>JDBC 驱动程序</strong>：<code>java.sql.Driver</code> 就是一个桥接。Java 应用程序（抽象部分）通过标准的 JDBC 接口与各种数据库驱动（实现部分，如 MySQL Driver, Oracle Driver）交互。</li><li><strong>不同平台的 GUI 工具包</strong>：一个窗口类（抽象）可以在不同操作系统（Windows, Linux, macOS - 实现）上进行绘制。</li></ul></li></ol><hr><h3 id="_8-与其他模式的比较" tabindex="-1"><a class="header-anchor" href="#_8-与其他模式的比较"><span>8. 与其他模式的比较</span></a></h3><ul><li><p><strong>与适配器模式（Adapter Pattern）的区别</strong>：</p><ul><li><strong>意图不同</strong>：桥接模式的意图是<strong>分离</strong>抽象和实现，让它们独立变化（设计时就考虑）；适配器模式的意图是<strong>兼容</strong>两个不兼容的接口（通常是事后补救）。</li><li><strong>时机不同</strong>：桥接模式通常在系统设计初期使用；适配器模式则在系统集成或重构时使用。</li></ul></li><li><p><strong>与策略模式（Strategy Pattern）的区别</strong>：</p><ul><li>两者都使用组合，但目的不同。</li><li><strong>策略模式</strong>：关注于封装一系列<strong>算法</strong>，让它们可以互相替换，客户端通常知道有哪些策略并主动选择。它改变的是对象的<strong>行为</strong>。</li><li><strong>桥接模式</strong>：关注于<strong>结构</strong>上的解耦，将抽象和实现分开。客户端通常只与抽象部分交互，实现部分在创建时就已确定。它改变的是对象的<strong>实现</strong>。</li></ul></li></ul><p>希望这份详细的介绍能帮助你彻底理解桥接模式！</p>`,54)]))}const k=i(e,[["render",h]]),r=JSON.parse('{"path":"/design_pattern/Bridge_Pattern/","title":"桥接模式","lang":"zh-CN","frontmatter":{"title":"桥接模式","createTime":"2025/06/20 03:20:50","permalink":"/design_pattern/Bridge_Pattern/","tags":["设计模式","结构型模式"]},"readingTime":{"minutes":7.09,"words":2126},"git":{"createdTime":1750361549000,"updatedTime":1755980245000,"contributors":[{"name":"luooda","username":"luooda","email":"phnoneld@outlook.com","commits":2,"avatar":"https://avatars.githubusercontent.com/luooda?v=4","url":"https://github.com/luooda"}]},"filePathRelative":"notes/design_pattern/13.Bridge_Pattern.md","headers":[]}');export{k as comp,r as data};
