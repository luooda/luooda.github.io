import{_ as i,c as a,a as n,o as l}from"./app-DF0nvRj4.js";const h={};function e(t,s){return l(),a("div",null,s[0]||(s[0]=[n(`<p>代理模式是结构型模式中非常重要且应用广泛的一个。它的核心思想是<strong>为其他对象提供一种代理以控制对这个对象的访问</strong>。</p><h3 id="一、-什么是代理模式" tabindex="-1"><a class="header-anchor" href="#一、-什么是代理模式"><span>一、 什么是代理模式？</span></a></h3><h4 id="_1-核心思想" tabindex="-1"><a class="header-anchor" href="#_1-核心思想"><span>1. 核心思想</span></a></h4><p>在不直接访问目标对象（也叫真实对象或被代理对象）的前提下，通过一个“代理者”来间接地访问它。这个代理者可以在客户端和目标对象之间起到<strong>中介</strong>和<strong>保护</strong>的作用。</p><p>客户端以为自己直接与目标对象交互，但实际上它所有的请求都先经过了代理对象。代理对象在将请求转发给目标对象之前或之后，可以执行一些额外的操作。</p><h4 id="_2-通俗比喻-明星和经纪人" tabindex="-1"><a class="header-anchor" href="#_2-通俗比喻-明星和经纪人"><span>2. 通俗比喻：明星和经纪人</span></a></h4><p>这是解释代理模式最贴切的比喻。</p><ul><li><strong>客户端 (Client):</strong> 粉丝、广告商、记者。</li><li><strong>目标对象/真实主题 (Real Subject):</strong> 明星本人 (<code>Star</code>)。</li><li><strong>代理对象 (Proxy):</strong> 经纪人 (<code>Agent</code>)。</li><li><strong>共同接口 (Subject):</strong> 明星和经纪人对外都声称能处理演艺事务（如签约、演出）。</li></ul><p><strong>流程：</strong></p><ol><li>广告商（客户端）想找某位明星（目标对象）拍广告。</li><li>他不会直接去找明星，而是联系这位明星的经纪人（代理对象）。</li><li>经纪人会处理一系列前置工作： <ul><li><strong>访问控制：</strong> 检查广告商的资质和报价，过滤掉不靠谱的请求。</li><li><strong>增强服务：</strong> 协商合同条款、安排档期。</li></ul></li><li>如果一切合适，经纪人才会去联系明星，安排具体的拍摄事宜（将请求转发给目标对象）。</li><li>拍摄完成后，经纪人可能还会有一些收尾工作，比如收款。</li></ol><p>在这个过程中，经纪人（代理）<strong>控制</strong>了对明星（目标对象）的访问，并<strong>增强</strong>了服务。</p><hr><h3 id="二、-代理模式的结构与实现" tabindex="-1"><a class="header-anchor" href="#二、-代理模式的结构与实现"><span>二、 代理模式的结构与实现</span></a></h3><p>代理模式通常包含三个角色：</p><ol><li><strong>Subject（抽象主题）：</strong> 定义了真实主题和代理主题的共同接口。这样，任何使用真实主题的地方都可以用代理主题来替代。</li><li><strong>RealSubject（真实主题）：</strong> 真正执行业务逻辑的类，是代理对象所代表的真实对象。</li><li><strong>Proxy（代理）：</strong> 持有对真实主题的引用。它实现了与真实主题相同的接口，可以在将请求转发给真实主题前后执行附加操作。</li></ol><h4 id="代码实例-静态代理" tabindex="-1"><a class="header-anchor" href="#代码实例-静态代理"><span>代码实例（静态代理）</span></a></h4><p>场景：我们有一个提供数据库查询服务的类 <code>DatabaseQueryService</code>，我们想在执行查询前后记录日志。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 1. Subject (抽象主题)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">interface</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> IQueryService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">doQuery</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">query</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 2. RealSubject (真实主题)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> DatabaseQueryService</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> implements</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> IQueryService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">doQuery</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">query</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 模拟数据库查询</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Executing query: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> query</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 模拟耗时操作</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">InterruptedException </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printStackTrace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Query Result</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 3. Proxy (代理)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> QueryServiceProxy</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> implements</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> IQueryService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 持有对真实主题的引用</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> IQueryService</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> realService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> QueryServiceProxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 在代理中创建或获取真实对象</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">realService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> DatabaseQueryService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">doQuery</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">query</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 在调用真实方法前执行的附加操作</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">LOG: A query is about to be executed at </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentTimeMillis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 将请求转发给真实主题</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> realService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">doQuery</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">query</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 在调用真实方法后执行的附加操作</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">LOG: The query has been executed.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 客户端调用</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Client</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 客户端直接与代理对象交互，而不知道真实对象的存在</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        IQueryService</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> queryService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> QueryServiceProxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> queryService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">doQuery</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">SELECT * FROM users</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Client received: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端完全不知道日志记录的存在，它只与 <code>IQueryService</code> 接口交互。代理对象 <code>QueryServiceProxy</code> 透明地增加了日志功能。</p><h3 id="三、-代理模式的分类" tabindex="-1"><a class="header-anchor" href="#三、-代理模式的分类"><span>三、 代理模式的分类</span></a></h3><p>根据代理的<strong>创建时机</strong>和<strong>实现方式</strong>，代理模式主要分为以下几种：</p><h4 id="_1-静态代理-static-proxy" tabindex="-1"><a class="header-anchor" href="#_1-静态代理-static-proxy"><span>1. 静态代理 (Static Proxy)</span></a></h4><ul><li><strong>实现：</strong> 如上例所示，代理类和真实主题类都实现了同一个接口，代理类是在<strong>编译时</strong>就已经创建好的。</li><li><strong>优点：</strong> 实现简单，易于理解。</li><li><strong>缺点：</strong> 非常不灵活。如果接口中增加了新的方法，真实主题和所有代理类都必须进行修改。而且每代理一个真实主题，就需要创建一个新的代理类，导致类的数量剧增。</li></ul><h4 id="_2-动态代理-dynamic-proxy" tabindex="-1"><a class="header-anchor" href="#_2-动态代理-dynamic-proxy"><span>2. 动态代理 (Dynamic Proxy)</span></a></h4><ul><li><strong>实现：</strong> 代理类是在<strong>运行时</strong>动态生成的，而不是在编译时。它不需要为每个真实主题手动编写代理类。</li><li><strong>优点：</strong> 非常灵活。可以为一个或多个接口动态地生成代理类，解决了静态代理类数量爆炸的问题。</li><li><strong>缺点：</strong> 实现相对复杂，需要借助特定的API。</li><li><strong>Java中的实现方式：</strong><ul><li><strong>JDK动态代理：</strong> 基于<strong>接口</strong>实现。要求被代理的类必须实现一个或多个接口。通过 <code>java.lang.reflect.Proxy</code> 类和 <code>InvocationHandler</code> 接口实现。</li><li><strong>CGLIB动态代理：</strong> 基于<strong>继承</strong>实现。它通过生成被代理类的子类来作为代理。即使被代理的类没有实现接口，也可以使用。但不能代理 <code>final</code> 类。</li></ul></li></ul><h4 id="_3-其他常见分类-按用途" tabindex="-1"><a class="header-anchor" href="#_3-其他常见分类-按用途"><span>3. 其他常见分类（按用途）</span></a></h4><ul><li><strong>远程代理 (Remote Proxy):</strong> 代表一个位于不同地址空间（如另一台服务器）的对象。客户端调用远程代理的方法，代理负责网络通信，将请求打包发送给远程的真实对象。RPC（远程过程调用）框架的核心就是远程代理。</li><li><strong>虚拟代理 (Virtual Proxy):</strong> 用于延迟加载。当一个对象的创建成本很高时（如加载一张高清大图），可以先用一个轻量级的虚拟代理来代替它。只有当客户端真正需要使用这个对象时，虚拟代理才会去创建并加载真实的重量级对象。</li><li><strong>保护代理 (Protection Proxy):</strong> 用于控制对真实对象的访问权限。在将请求转发给真实对象之前，保护代理会检查调用者是否具有足够的操作权限。</li><li><strong>缓存代理 (Caching Proxy):</strong> 为开销大的操作结果提供临时存储。当多个客户端请求相同的结果时，代理可以返回缓存的数据，而无需重复调用真实对象。</li></ul><h3 id="四、-优缺点与适用场景" tabindex="-1"><a class="header-anchor" href="#四、-优缺点与适用场景"><span>四、 优缺点与适用场景</span></a></h3><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><ol><li><strong>职责清晰：</strong> 真实主题只关心核心业务逻辑，代理则负责处理非核心的附加任务，符合单一职责原则。</li><li><strong>高扩展性：</strong> 可以在不修改真实主题的情况下，轻松地增加新的功能（如日志、缓存、权限控制）。</li><li><strong>控制访问：</strong> 代理可以作为一道屏障，对访问进行过滤和控制。</li><li><strong>降低耦合：</strong> 客户端与真实主题解耦，只依赖于抽象接口。</li></ol><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h4><ol><li><strong>增加系统复杂度：</strong> 需要额外增加代理类，可能会导致系统中的类数量增加。</li><li><strong>可能降低性能：</strong> 由于在客户端和真实主题之间增加了一层代理，请求的处理速度可能会有轻微的下降。</li></ol><h4 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h4><ul><li>当你希望在不改变一个已有类的情况下，为其增加一些辅助功能时（如日志、事务、权限）。</li><li>当你需要控制对一个对象的访问时（保护代理）。</li><li>当你需要为一个远程对象提供一个本地代表时（远程代理）。</li><li>当你需要延迟加载一个重量级对象时（虚拟代理）。</li><li><strong>AOP（面向切面编程）</strong> 的核心实现机制就是动态代理。Spring框架中的事务管理、日志记录等功能大量使用了代理模式。</li></ul>`,34)]))}const p=i(h,[["render",e]]),r=JSON.parse('{"path":"/design_pattern/Proxy_Pattern/","title":"代理模式","lang":"zh-CN","frontmatter":{"title":"代理模式","createTime":"2025/06/20 03:14:30","permalink":"/design_pattern/Proxy_Pattern/","tags":["设计模式","结构型模式"]},"readingTime":{"minutes":6.55,"words":1965},"git":{"createdTime":1750361549000,"updatedTime":1755980245000,"contributors":[{"name":"luooda","username":"luooda","email":"phnoneld@outlook.com","commits":2,"avatar":"https://avatars.githubusercontent.com/luooda?v=4","url":"https://github.com/luooda"}]},"filePathRelative":"notes/design_pattern/18.Proxy_Pattern.md","headers":[]}');export{p as comp,r as data};
